#ifndef _gkg_anatomist_plugin_GkgDwiGlobalTractographyViewer_AGlobalTractographyObject_h_
#define _gkg_anatomist_plugin_GkgDwiGlobalTractographyViewer_AGlobalTractographyObject_h_


#include <anatomist/object/sliceable.h>
#include <anatomist/primitive/primitive.h>
#include <anatomist/control/qObjTree.h>
#include <graph/tree/tree.h>

#include <gkg-dmri-container/SpinGlassAndConnectionMap.h>

#include <QObject>
#include <QtOpenGL>
#include <QGLShader>
#include <QGLShaderProgram>


namespace gkg
{


class AGlobalTractographyObject : public QObject,
                                  public anatomist::SliceableObject
{

  public:

    friend class AnaGkgModule;

    AGlobalTractographyObject( 
      const RCPointer< SpinGlassAndConnectionMap >& spinGlassAndConnectionMap );
    virtual ~AGlobalTractographyObject();

    bool Is2DObject();
    bool Is3DObject();

    // tree menu specific to the object
    Tree* optionTree() const;

    // bounding box information
    float MinX2D() const;
    float MinY2D() const;
    float MinZ2D() const;
    float MaxX2D() const;
    float MaxY2D() const;
    float MaxZ2D() const;

    bool boundingBox( Point3df& lowerCorner, Point3df& upperCorner ) const;

    void update();

    //bool render( anatomist::PrimList& primitiveList,
    //             const anatomist::ViewState& viewState );
    bool glMakeBodyGLL( const anatomist::ViewState& viewState,
                        const anatomist::GLList& glList ) const;

    // static methods
    static int32_t registerClass();
    static int32_t getClassType();

    // static public attributes
    static int32_t _classType;
    static Tree* _optionTree;

  protected:

    void clear();

    void setSpinGlassShaderCode();
    void setSpinGlassShaderAttributes();
    void setSpinGlassExtremities();
    void setSpinGlassShaderColorValues();

    void setSpinGlassConnectionShaderCode();
    void setSpinGlassConnectionShaderAttributes();
    void setSpinGlassConnectionExtremities();
    void setSpinGlassConnectionShaderColorValues();

    RCPointer< SpinGlassAndConnectionMap > _spinGlassAndConnectionMap;
 
    
    ////////////////////////////////////////////////////////////////////////////
    // spin glasses ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////

    // list of spin glass indices
    anatomist::GLList* _glSpinGlassList;

    // shader attributes for spin glasses
    QGLShaderProgram* _qGLSpinGlassShaderProgram;
    QGLShader* _qGLSpinGlassShader;

    // making links between spin glass shader variables and private members of 
    // this class
    int32_t _uniformIsShaderedSpinGlassObject;
    int32_t _uniformLocationSpinGlassExtremities;
    int32_t _uniformLocationSpinGlassColorValues;

    // spin glass extremities and color values
    std::vector< QVector3D* > _spinGlassExtremities;
    std::vector< QVector3D* > _spinGlassColorValues;

    ////////////////////////////////////////////////////////////////////////////
    // spin glass connections //////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////

    // list of spin glass connection indices
    anatomist::GLList* _glSpinGlassConnectionList;

    // shader attributes for spin glass connections
    QGLShaderProgram* _qGLSpinGlassConnectionShaderProgram;
    QGLShader* _qGLSpinGlassConnectionShader;

    // making links between spin glass connection shader variables and private
    // members of this class
    int32_t _uniformIsShaderedSpinGlassConnectionObject;
    int32_t _uniformLocationSpinGlassConnectionExtremities;
    int32_t _uniformLocationSpinGlassConnectionColorValues;

    // spin glass connection extremities and color values
    std::vector< QVector3D* > _spinGlassConnectionExtremities;
    std::vector< QVector3D* > _spinGlassConnectionColorValues;

};


}


#endif
